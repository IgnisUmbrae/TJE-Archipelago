from itertools import batched, chain, product
from typing import Callable, Iterable
from math import floor, ceil, sqrt
import pygame

SPECIAL_ADDENDA = {
    0x1A : "on a tiny lone island out in space",
    0x1C : "on a pair of tiny islands out in space",
    0x1D : "on a tiny island out in space",
    0x34 : "on a tiny desert island out in space",
    0x4C : "on a tiny island in a lake",
    0x4D : "on a tiny island in a lake",
    0x4E : "on a tiny island in a lake",
    0x4F : "on a tiny island in a lake",
    0x50 : "on a tiny island in a lake",
    0x51 : "on a tiny island in a lake",
}

WATER_TILES = list(range(0x40, 0x66)) + [0x68, 0x69, 0x6B, 0x6D, 0x6F, 0x71, 0x73, 0x75, 0x76, 0x77, 0x79]

ADVS = [
    "a tiny bit",
    "a little",
    "somewhat",
    "quite far",
    "very far",
    "extremely far",
]

# All void or sea, no items can spawn here
NO_SPAWN_TILES = (0x22, 0x52, 0x53, 0x54, 0x55)

FIXED_WORLD_LEVEL_2_A = b"\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x82\x00\x81\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x1A\x00\x22\x60\x22\x00\x1D\x00\x83\x00\x80\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x9A\x00\x22\x00\x22\x00\x82\x60\xA0\x00\x02\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x82\x14\x0B\x13\x1E\x00\x04\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x82\x00\x02\x00\x22\x00\x0D\x00\x91\x00\x21\x05\x1E\x00\x86\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x01\x00\x0B\x00\x08\x00\x87\x00\x10\x03\x0B\x06\x1E\x02\x21\x00\x08\x00\x02\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x00\x00\x0A\x03\x21\x0F\x21\x06\x1E\x02\x49\x00\xC9\x00\x21\x00\x8A\x00\x03\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x06\x15\x1E\x00\xA1\x00\x1E\x00\xC6\x00\x46\x00\xA1\x00\x86\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x82\x00\x88\x12\x21\x16\x1E\x13\x21\x00\x44\x00\x40\x00\xC9\x00\x8B\x00\x81\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x82\x00\x02\x00\x00\x00\x0A\x00\x9E\x00\x9E\x05\x21\x00\x48\x00\x57\x00\x4B\x00\x09\x00\x03\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x06\x00\x93\x00\x98\x00\x13\x14\x1E\x06\x21\x02\x21\x00\x21\x00\x09\x00\x9F\x00\x80\x00\x22\x00\x01\x00\x81\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x06\x00\x08\x00\xA0\x00\x66\x60\x9F\x00\x0A\x00\x8A\x00\x1F\x00\x80\x00\x22\x00\x22\x00\x9D\x00\x83\x00\x80\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x06\x00\x21\x00\x09\x00\x03\x60\x22\x00\x83\x00\x03\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x34\x00\x83\x60\x9B\x00\x80\x60\x22\x60\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x1D\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x60\x22\x60\x22\x00\x22\x60\x22\x00\x22\x00\x22\x00\x82\x00\x02\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x60\x22\x00\x82\x00\x02\x60\x22\x00\x22\x00\x22\x00\x00\x00\x03\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x60\x22\x60\x22\x60\x22\x00\x83\x00\x80\x60\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x60\x22\x00\x22\x60\x22\x60\x22\x60\x22\x60\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x60\x22\x60\x22\x60\x22\x60\x22\x60\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22"
#FIXED_WORLD_LEVEL_2_D = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x09\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x09\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x0A\x0D\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x07\x0C\x06\x09\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x0A\x0B\x0B\x09\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
FIXED_WORLD_LEVEL_2_ITEM_COORDS = [
    (1596, 918),
    (908, 1342),
    (2292, 1038),
    (1932, 822),
    (556, 1166),
    (1004, 974),
    (1036, 1102),
    (1972, 934),
    (1980, 598),
    (1484, 814),
    (2068, 718),
    (1892, 822)
]
FIXED_WORLD_LEVEL_2_TREE_COORDS = [
    (1008, 670),
    (2160, 366),
    (1520, 1262),
    (2336, 1038)
]
FIXED_WORLD_LEVEL_2_ELEVATOR_UP_COORD = (1776, 635)
FIXED_WORLD_LEVEL_2_SHIP_PIECE_COORD = (896, 1096)

FIXED_WORLD_LEVEL_3 = b"\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x0D\x00\x98\x00\x0E\x00\x22\x00\x22\x00\x01\x00\x02\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x19\x00\x22\x00\x0C\x60\x95\x60\x16\x60\x06\x00\x04\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x0C\x00\x0E\x00\x82\x60\xA0\x00\x10\x00\x0B\x00\x04\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x19\x00\x00\x00\x89\x00\x21\x00\x8A\x00\x03\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x19\x00\x22\x00\x06\x00\xA1\x00\x04\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x01\x00\x02\x00\x22\x00\x82\x00\x02\x00\x19\x00\x0D\x00\x91\x00\x09\x00\x80\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x06\x00\x8B\x00\x07\x00\x88\x00\x08\x00\x10\x00\x10\x00\x0B\x00\x86\x00\x22\x00\x22\x00\x34\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x82\x00\x88\x00\x1E\x00\x1E\x00\xA1\x00\xA1\x00\xCA\x00\xC5\x00\xC9\x00\x86\x00\x22\x00\x9C\x00\x22\x00\x01\x00\x02\x00\x22\x00\x22\x00\x22\x00\x22\x00\x84\x00\xA1\x00\x9E\x00\x1E\x00\x9E\x00\x21\x00\x48\x00\x57\x00\x4B\x00\x8B\x00\x07\x00\x87\x00\x81\x00\x00\x00\x80\x00\x22\x00\x22\x00\x22\x00\x22\x00\x06\x00\xA1\x00\x9E\x00\x21\x00\x09\x60\x1B\x00\x1B\x00\x1B\x00\x89\x00\x9E\x00\x8A\x00\x12\x00\x03\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x9D\x00\x06\x00\xA1\x00\xA1\x00\xA1\x00\x93\x60\x98\x00\x0E\x00\x22\x00\x84\x00\x1E\x00\x86\x00\x19\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x00\x00\x89\x00\x09\x00\x9B\x00\x03\x60\x15\x00\x0F\x00\x22\x00\x00\x00\x89\x00\x8B\x00\x10\x00\x02\x80\x24\x80\x25\x00\x22\x00\x22\x00\x22\x00\x22\x60\x22\x60\x84\x00\x04\x60\x22\x60\x22\x60\x22\x60\x22\x00\x22\x00\x22\x00\x06\x00\x09\x00\x1F\x00\x80\x80\x23\x80\x26\x00\x22\x00\x22\x00\x22\x00\x22\x60\x22\x00\x84\x60\x04\x60\x22\x60\x22\x60\x22\x60\x22\x60\x22\x00\x82\x00\x0B\x00\x86\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x82\x60\x87\x00\x88\x00\x08\x00\x81\x00\x22\x00\x22\x00\x22\x60\x22\x60\x06\x00\x9E\x00\x8B\x00\x02\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x00\x00\x1F\x00\x89\x00\x09\x00\x03\x00\x22\x00\x22\x00\x22\x00\x22\x00\x84\x00\xCA\x00\xC9\x00\x04\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x83\x00\x03\x00\x22\x00\x22\x00\x22\x00\x22\x60\x22\x60\x84\x00\x48\x00\x4B\x00\x8B\x00\x02\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x60\x22\x60\x22\x60\x22\x60\x22\x60\x22\x00\x00\x00\x0A\x00\x09\x00\x9B\x00\x80\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x60\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x84\x00\x04\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x60\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x00\x00\x80\x00\x22\x00\x22\x00\x22\x00\x9D\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x60\x22\x60\x22\x00\x22\x00\x22\x00\x82\x00\x02\x00\x22\x00\x22\x00\x22\x00\x1A\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x60\x22\x00\x22\x00\x22\x00\x00\x00\x80\x00\x22\x00\x22\x00\x01\x00\x81\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x1C\x00\x00\x00\x03\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22\x00\x22"
FIXED_WORLD_LEVEL_3_ELEVATOR_UP_COORD = (1008, 827)
#region Map data and tile structure

# 19 tiles wide, 26 tiles high
# 2 bytes per tile
# Tile structure: EM, where E is an extra byte and M is the main byte
# E structure: ?HUF₁ RRRR
# • ? is a bit of unknown use
# • H is a "hidden" flag for hidden paths
# • U is an "uncovered" flag for hidden paths
# • F₁ is a horizontal mirror flag for the road
# • R is the road type
# M structure: F₂TTT TTTT
# • F₂ is a horizontal mirror flag for the base tile
# • T is the tile type

#endregion

class TJETile:
    def __init__(self, row: int, col: int, extra_byte: int, main_byte: int):
        self.row, self.col = row, col
        self.type = main_byte & 0x7F
        self.mirrored = main_byte & 0x80 > 0
        self.road_type = extra_byte & 0xF
        self.road_mirrored = extra_byte & 0x10
        self.uncovered = extra_byte & 0x20
        self.hidden = extra_byte & 0x40
        self.unknown_property = extra_byte & 0x80

def tile_type_to_image_rect(tile_type: int) -> tuple:
    row, col = divmod(tile_type, 16)
    return (16*col, 8*row, 16, 8)

def road_type_to_image_rect(road_type: int) -> tuple:
    return (16*road_type, 0, 16, 8)

def item_world_coord_to_map_tile_coord(world_coord: tuple) -> tuple:
    return (world_coord[0]//8 - 12, world_coord[1]//8)

def elevator_world_coord_to_map_tile_coord(world_coord: tuple) -> tuple:
    return (world_coord[0]//8 - 16,
            world_coord[1]//8 - 8)

def ship_piece_world_coord_to_map_tile_coord(world_coord: tuple) -> tuple:
    return (world_coord[0]//8 - 21,
            world_coord[1]//8 - 8)

def render_map(map_data: list[TJETile], extreme_points: list[tuple[int, int]]):
    SCALE = 4

    pygame.init()
    clock = pygame.time.Clock()
    running = True
    screen = pygame.display.set_mode((SCALE*320, SCALE*224))
    map_surface = pygame.Surface((320, 224))

    bg = pygame.image.load("map_tiles/map-bg+border.png").convert()
    map_tiles = pygame.image.load("map_tiles/maptiles_00-79.png").convert()
    road_tiles = pygame.image.load("map_tiles/roadtiles_00-0F.png").convert()
    elevator = pygame.image.load("map_tiles/elevator.png").convert()
    ship_piece = pygame.image.load("map_tiles/shippiece-on.png").convert()
    ship_piece.set_colorkey("black")

    map_surface.blit(bg, (0,0))

    for i, t in enumerate(map_data):
        dest_row, dest_col = divmod(i, 19)
        dest_x = dest_col*16 + 6
        dest_y = dest_row*8 + 8

        # Main tile
        tile_src_rect = tile_type_to_image_rect(t.type)

        next_tile_img = pygame.Surface((16, 8))
        next_tile_img.set_colorkey("black")
        next_tile_img.blit(map_tiles, (0, 0), tile_src_rect)
        if t.mirrored:
            next_tile_img = pygame.transform.flip(next_tile_img, True, False)
        if t.hidden:
            pygame.draw.circle(next_tile_img, "red", (8, 4), 2, 0)

        # Road overlay
        if t.road_type > 0:
            road_src_rect = tile_type_to_image_rect(t.road_type)

            next_road_img = pygame.Surface((16, 8))
            next_road_img.set_colorkey("black")
            next_road_img.blit(road_tiles, (0, 0), road_src_rect)
            if t.road_mirrored:
                next_road_img = pygame.transform.flip(next_road_img, True, False)

            next_tile_img.blit(next_road_img, (0, 0))

        # Extreme points

        if t.type not in NO_SPAWN_TILES and (t.col in (extreme_points["east"], extreme_points["west"]) or
                                             t.row in (extreme_points["north"], extreme_points["south"])):
            next_tile_img.fill("red", None, special_flags=pygame.BLEND_ADD)

        map_surface.blit(next_tile_img, (dest_x, dest_y))

    # Items

    for coord in FIXED_WORLD_LEVEL_2_ITEM_COORDS:
        pygame.draw.circle(map_surface, "white", item_world_coord_to_map_tile_coord(coord), 2, 0)

    # Elevator

    map_surface.blit(elevator, elevator_world_coord_to_map_tile_coord(FIXED_WORLD_LEVEL_2_ELEVATOR_UP_COORD))

    # Ship piece

    map_surface.blit(ship_piece, ship_piece_world_coord_to_map_tile_coord(FIXED_WORLD_LEVEL_2_SHIP_PIECE_COORD))

    screen.blit(pygame.transform.scale(map_surface, screen.get_size()), (0, 0))
    pygame.display.flip()

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
        clock.tick(30)

    pygame.quit()

def first_matching_index(iterable: Iterable, condition: Callable, default=None) -> int | None:
    return next((i for i, x in enumerate(iterable) if condition(x)), default)

# Finds the most northern/southern/eastern/western points on the map
def get_extreme_points(map_data: list[list[TJETile]]) -> dict[str, int]:
    extremes = {}
    land_data_rows = [[int(tile.type not in NO_SPAWN_TILES) for tile in row] for row in map_data]
    extremes["north"] = first_matching_index(land_data_rows, lambda row: sum(row) > 0)
    extremes["south"] = 25 - first_matching_index(reversed(land_data_rows), lambda row: sum(row) > 0)

    land_data_cols = list(zip(*land_data_rows)) # switch rows and cols
    extremes["east"] = first_matching_index(land_data_cols, lambda col: sum(col) > 0)
    extremes["west"] = 18 - first_matching_index(reversed(land_data_cols), lambda col: sum(col) > 0)
    return extremes

def linear_rescale(n: float, old_min: float, old_max: float, new_min: float, new_max: float) -> float:
    return (new_max - new_min)/(old_max - old_min) * (n - old_min) + new_min

def round_to_nearest_multiple(n: float, multiple: float) -> float:
    return round(n/multiple)*multiple

def scan_for_road(tile_coords: tuple, map_data: list[list[TJETile]]) -> bool:
    candidate_tiles = product((tile_coords[0], tile_coords[0]-1, tile_coords[0]+1),
                              (tile_coords[1], tile_coords[1]-1, tile_coords[1]+1))
    for tile in candidate_tiles:
        if map_data[tile[0]][tile[1]].road_type > 0: return True
    return False

def scan_for_water(tile_coords: tuple, map_data: list[list[TJETile]]) -> bool:
    candidate_tiles = product((tile_coords[0], tile_coords[0]-1, tile_coords[0]+1),
                              (tile_coords[1], tile_coords[1]-1, tile_coords[1]+1))
    for tile in candidate_tiles:
        if map_data[tile[0]][tile[1]].type in WATER_TILES: return True
    return False

def concat_item_list(items: list[str]) -> str:
    match len(items):
        case 0:
            return ""
        case 1:
            return items[0]
        case 2:
            return " and ".join(items)
        case _:
            return f"{", ".join(items[:-1])} and {items[-1]}"

def dist(point1: tuple, point2: tuple) -> float:
    return sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2)

def evaluate_item(item_coords: tuple, map_data: list[list[TJETile]], extreme_points: dict[str, tuple]) -> str:
    tile_x, tile_y = item_coords[0]/(8*16), item_coords[1]/(8*8)
    tile_coords = (floor(tile_y), floor(tile_x))
    tile_type = map_data[tile_coords[0]][tile_coords[1]].type
    tile_x_assessment = linear_rescale(tile_x, 0, 18, extreme_points["west"], extreme_points["east"])
    tile_x_assessment = linear_rescale(tile_x_assessment, extreme_points["west"], extreme_points["east"], 1, -1)

    tile_y_assessment = linear_rescale(tile_y, 0, 25, extreme_points["north"], extreme_points["south"])
    tile_y_assessment = linear_rescale(tile_y_assessment, extreme_points["north"], extreme_points["south"], 1, -1)

    direction_x = "west" if tile_x_assessment < 0 else "east"
    x_scale = int((len(ADVS)-1)*round_to_nearest_multiple(abs(tile_x_assessment), 1/(len(ADVS)-1)))
    direction_y = "south" if tile_y_assessment < 0 else "north"
    y_scale = int((len(ADVS)-1)*round_to_nearest_multiple(abs(tile_y_assessment), 1/(len(ADVS)-1)))

    addendum1 = SPECIAL_ADDENDA.get(tile_type, None)
    nearby_landmarks = []
    if scan_for_water(tile_coords, map_data):
        nearby_landmarks.append("water")
    for tree_coord in FIXED_WORLD_LEVEL_2_TREE_COORDS:
        if dist(tree_coord, item_coords) < 80:
            nearby_landmarks.append("a tree")
    if scan_for_road(tile_coords, map_data):
        nearby_landmarks.append("a road")

    if x_scale == y_scale:
        if x_scale == 0:
            main_str = "roughly central"
        else:
            main_str = f"{ADVS[x_scale]} {direction_y}{direction_x}"
    else:
        main_str = f"{ADVS[x_scale]} {direction_x}" if x_scale > y_scale else f"{ADVS[y_scale]} {direction_y}"

    if addendum1:
        main_str += f", {addendum1}"
    if nearby_landmarks:
        main_str += f", near {concat_item_list(nearby_landmarks)}"

    return main_str

map_data = [
    [TJETile(i, j, *t) for j, t in enumerate(batched(group, 2))]
    for i, group in enumerate(batched(FIXED_WORLD_LEVEL_2_A, 19*2))
    ]

extreme_points = get_extreme_points(map_data)

for i, item in enumerate(FIXED_WORLD_LEVEL_2_ITEM_COORDS):
    print(f"Item {i+1}:",evaluate_item(item, map_data, extreme_points))

render_map(chain(*map_data), get_extreme_points(map_data))